name: Build and Run Docker Image

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  RESOURCE_GROUP: financial-forecasting-rg
  STORAGE_ACCOUNT_NAME: forecastsa070369
  FILE_SHARE_NAME: forecast-pipeline-share
  CONTAINER_NAME: forecast-predictions

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to ACR using Docker
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Check if rebuild is needed
      id: changes
      run: |
        git fetch origin master --depth=2
        CHANGED=$(git diff --name-only HEAD HEAD~1 | grep -E '(^Dockerfile|^src/|^requirements.txt)' || true)
        if [ -z "$CHANGED" ]; then
          echo "No relevant changes detected. Skipping build."
          echo "build_needed=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected. Proceeding with build."
          echo "build_needed=true" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      if: steps.changes.outputs.build_needed == 'true'
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/financial-forecasting:latest .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/financial-forecasting:latest


    - name: Run Pipeline using native az CLI
      run: |
        export AZURE_CORE_NO_COLOR="true"
        export MSAL_PY_CACHE_DISABLE=1

        STORAGE_ACCOUNT_KEY=$(az storage account keys list \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --account-name "${{ env.STORAGE_ACCOUNT_NAME }}" \
          --query "[0].value" -o tsv)

        az container list --resource-group "${{ env.RESOURCE_GROUP }}" \
          --query "[?starts_with(name, 'forecast-pipeline-')].name" -o tsv | \
          xargs -r -I {} az container delete --resource-group "${{ env.RESOURCE_GROUP }}" --name {} --yes

        CONTAINER_NAME="forecast-pipeline-$(date +%Y%m%d-%H%M%S)"

        az container create \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --name "$CONTAINER_NAME" \
          --image "${{ secrets.ACR_LOGIN_SERVER }}/financial-forecasting:latest" \
          --registry-login-server "${{ secrets.ACR_LOGIN_SERVER }}" \
          --registry-username "${{ secrets.ACR_USERNAME }}" \
          --registry-password "${{ secrets.ACR_PASSWORD }}" \
          --os-type Linux \
          --environment-variables \
            FRED_API_KEY="${{ secrets.FRED_API_KEY }}" \
            AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}" \
          --azure-file-volume-account-name "${{ env.STORAGE_ACCOUNT_NAME }}" \
          --azure-file-volume-account-key "$STORAGE_ACCOUNT_KEY" \
          --azure-file-volume-share-name "${{ env.FILE_SHARE_NAME }}" \
          --azure-file-volume-mount-path /mnt/fileshare \
          --cpu 1 --memory 4 --restart-policy Never \
          --location "${{ secrets.AZURE_LOCATION }}"

        while true; do
          STATE=$(az container show --resource-group "${{ env.RESOURCE_GROUP }}" --name "$CONTAINER_NAME" --query "instanceView.state" -o tsv)
          echo "State: $STATE"
          if [ "$STATE" = "Succeeded" ] || [ "$STATE" = "Failed" ] || [ "$STATE" = "Terminated" ]; then
            break
          fi
          sleep 30
        done

        az container logs --resource-group "${{ env.RESOURCE_GROUP }}" --name "$CONTAINER_NAME" || echo "No logs"

        LATEST_LOG=$(az storage file list \
          --account-name "${{ env.STORAGE_ACCOUNT_NAME }}" \
          --account-key "$STORAGE_ACCOUNT_KEY" \
          --share-name "${{ env.FILE_SHARE_NAME }}" \
          --query "[?starts_with(name, 'pipeline_')].name" -o tsv | tail -1)

        if [ -n "$LATEST_LOG" ]; then
          az storage file download \
            --account-name "${{ env.STORAGE_ACCOUNT_NAME }}" \
            --account-key "$STORAGE_ACCOUNT_KEY" \
            --share-name "${{ env.FILE_SHARE_NAME }}" \
            --path "$LATEST_LOG" \
            --dest ./pipeline.log
          echo "=== PIPELINE LOG ==="
          cat ./pipeline.log
          echo "=== END LOG ==="
        fi

        az container delete --resource-group "${{ env.RESOURCE_GROUP }}" --name "$CONTAINER_NAME" --yes

        if [ "$STATE" != "Succeeded" ]; then
          exit 1
        fi