name: Run Financial Forecasting Pipeline

on:
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * 5'

env:
  RESOURCE_GROUP: financial-forecasting-rg
  STORAGE_ACCOUNT_NAME: forecastsa070369
  FILE_SHARE_NAME: forecast-pipeline-share
  CONTAINER_NAME: forecast-predictions

jobs:
  run-pipeline:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code (required for Git context)
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Run Pipeline using native az CLI
      run: |
        export AZURE_CORE_NO_COLOR="true"
        export MSAL_PY_CACHE_DISABLE=1

        STORAGE_ACCOUNT_KEY=$(az storage account keys list \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --account-name "${{ env.STORAGE_ACCOUNT_NAME }}" \
          --query "[0].value" -o tsv)

        az container list --resource-group "${{ env.RESOURCE_GROUP }}" \
          --query "[?starts_with(name, 'forecast-pipeline-')].name" -o tsv | \
          xargs -r -I {} az container delete --resource-group "${{ env.RESOURCE_GROUP }}" --name {} --yes

        CONTAINER_NAME="forecast-pipeline-$(date +%Y%m%d-%H%M%S)"

        az container create \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --name "$CONTAINER_NAME" \
          --image "${{ secrets.ACR_LOGIN_SERVER }}/financial-forecasting:latest" \
          --registry-login-server "${{ secrets.ACR_LOGIN_SERVER }}" \
          --registry-username "${{ secrets.ACR_USERNAME }}" \
          --registry-password "${{ secrets.ACR_PASSWORD }}" \
          --os-type Linux \
          --environment-variables \
            FRED_API_KEY="${{ secrets.FRED_API_KEY }}" \
            AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}" \
          --azure-file-volume-account-name "${{ env.STORAGE_ACCOUNT_NAME }}" \
          --azure-file-volume-account-key "$STORAGE_ACCOUNT_KEY" \
          --azure-file-volume-share-name "${{ env.FILE_SHARE_NAME }}" \
          --azure-file-volume-mount-path /mnt/fileshare \
          --cpu 1 --memory 4 --restart-policy Never \
          --location "${{ secrets.AZURE_LOCATION }}"

        echo "ðŸ“¡ Streaming container logs..."

        while true; do
          STATE=$(az container show \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "$CONTAINER_NAME" \
            --query "instanceView.state" -o tsv)

          echo "ðŸŸ¢ Container state: $STATE"

          # Stream logs incrementally every 20s
          az container logs --resource-group "${{ env.RESOURCE_GROUP }}" --name "$CONTAINER_NAME" || echo "(No logs yet)"

          if [[ "$STATE" == "Succeeded" || "$STATE" == "Failed" || "$STATE" == "Terminated" ]]; then
            echo "âœ… Container has completed with state: $STATE"
            break
          fi

          sleep 20
        done  

        az container delete --resource-group "${{ env.RESOURCE_GROUP }}" --name "$CONTAINER_NAME" --yes

        if [ "$STATE" != "Succeeded" ]; then
          exit 1
        fi