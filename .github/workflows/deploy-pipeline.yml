name: Deploy Financial Forecasting Pipeline

on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main, master ]  # Trigger on push to main/master
  schedule:
    - cron: '0 21 * * 5'  # Run every Friday at 09:00 PM UTC

env:
  RESOURCE_GROUP: financial-forecasting-rg
  STORAGE_ACCOUNT_NAME: forecastsa070369
  FILE_SHARE_NAME: forecast-pipeline-share
  CONTAINER_NAME: forecast-predictions

jobs:
  deploy-container:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Build and push Docker image
      run: |
        echo "Building Docker image..."
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/financial-forecasting:${{ github.run_number }} .
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/financial-forecasting:latest .
        
        echo "Pushing Docker image..."
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/financial-forecasting:${{ github.run_number }}
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/financial-forecasting:latest
        
    - name: Deploy to Azure Container Instance
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Getting storage account key..."
          STORAGE_ACCOUNT_KEY=$(az storage account keys list \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --query "[0].value" -o tsv)
          
          echo "Creating container instance..."
          CONTAINER_NAME="forecast-pipeline-$(date +%Y%m%d-%H%M%S)"
          
          az container create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "$CONTAINER_NAME" \
            --image ${{ secrets.ACR_LOGIN_SERVER }}/financial-forecasting:${{ github.run_number }} \
            --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --os-type Linux \
            --environment-variables \
              FRED_API_KEY=${{ secrets.FRED_API_KEY }} \
              AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
              CONTAINER_NAME=${{ env.CONTAINER_NAME }} \
            --azure-file-volume-account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --azure-file-volume-account-key "$STORAGE_ACCOUNT_KEY" \
            --azure-file-volume-share-name ${{ env.FILE_SHARE_NAME }} \
            --azure-file-volume-mount-path /mnt/fileshare \
            --cpu 2 \
            --memory 8 \
            --restart-policy Never \
            --location ${{ secrets.AZURE_LOCATION }}
          
          echo "Waiting for container to complete..."
          # Wait for container to finish (polling approach)
          while true; do
            STATE=$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name "$CONTAINER_NAME" --query "instanceView.state" -o tsv)
            echo "Container state: $STATE"
            if [ "$STATE" = "Succeeded" ] || [ "$STATE" = "Failed" ] || [ "$STATE" = "Terminated" ]; then
              break
            fi
            sleep 30
          done
          
          echo "Container completed with state: $STATE"
          echo "Container logs:"
          az container logs --resource-group ${{ env.RESOURCE_GROUP }} --name "$CONTAINER_NAME"
          
          echo "Cleaning up container..."
          az container delete --resource-group ${{ env.RESOURCE_GROUP }} --name "$CONTAINER_NAME" --yes
